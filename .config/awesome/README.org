#+TITLE: Aweomsome WM Config
#+PROPERTY: header-args :tangle rc.lua

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#status-bar-aka-panel][Status bar (a.k.a panel)]]
- [[#themes][Themes]]
- [[#signals][Signals]]
- [[#auto-start-windowless-processes][Auto start windowless processes]]
- [[#misc][Misc]]

* About This Config
This is my awesome window manager configuration.
awesomeWM is my main WM, and so this config contains more bells and whistles than other WMs.

I made this confid modular by moving most of the content of `rc.lua` to separate files and folders.
I started from the default config, and made few changes to accomodate it to my liking. I will explain the notable changes below.



* Status bar (a.k.a panel)
The status bar in my config isn't handled by the themes. Instead, it is defined in `deco/statusbar.lua`. I find this approach much cleaner, and allows me to have a consistant status bar even when I change the theme.
Currently, it usesd widgets from the `lain` extensions package for the fancy widgets, and calls to some scripts I wrote (which I put in my `~/.local/bin`) for very simple text based widgets.

* Themes
This config includes multiple themes, but most of them were only used for trial the first time I installed awesome.
I only use the `multicolour` theme, and it is the only one that is compatible with the status bar being defined in a seperate file.

* Signals
I added a couple signals to the default config.

#+BEGIN_SRC lua
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- Warp mouse to the center of focused client on focus change and swap

-- function move_mouse_onto_focused_client()
--     local c = client.focus
--     gears.timer( {  timeout = 0.1,
--                 autostart = true,
--                 single_shot = true,
--                 callback =  function()
--                     if mouse.object_under_pointer() ~= c then
--                         local geometry = c:geometry()
--                         local x = geometry.x + geometry.width/2
--                         local y = geometry.y + geometry.height/2
--                         mouse.coords({x = x, y = y}, true)
--                     end
--                 end } )
-- end

-- client.connect_signal("focus", move_mouse_onto_focused_client)
-- client.connect_signal("swapped", move_mouse_onto_focused_client)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- move focus to last focused client on client close
client.connect_signal("unmanage", function()
        local s = awful.screen.focused()
        local c = awful.client.focus.history.get(s, 0)
        if c == nil then return end
        awful.client.focus.byidx(0, c)
        -- move_mouse_onto_focused_client()
        -- awful.client.focus.history.previous()
        -- -- local c = awful.client.focus.history.get(awful.screen.focused(), 1)
        -- c:activate{}
        -- awful.client.focus.history.bydirection("up")
end)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- focus on last focused client in current tag after tag change
screen.connect_signal("tag::history::update", function()
        local s = awful.screen.focused()
        local c = awful.client.focus.history.get(s, 0)
        if c == nil then return end
        awful.client.focus.byidx(0, c)
end)
#+END_SRC



* Auto start windowless processes
To not run multiple instances of each startup program after a restart, I use the following `run_once` function.
#+BEGIN_SRC lua
local function run_once(cmd)
        -- strips any arguments from the command
        local args_start = string.find(cmd, " ")
        local pgrep_name = args_start and cmd:sub(0, args_start - 1) or cmd
        -- run the pgrep statement against just the command name without args
        local command = "pgrep -u $USER -x " .. pgrep_name .. " > /dev/null || " .. cmd
        -- run the command in async fashion
        awful.spawn.easy_async_with_shell(
            command,
            function( stdout, stderr, exitreason, exitcode )
                if exitcode ~= 0 then
                    naughty.notify({
                        preset  = naughty.config.presets.critical           ,
                        text    = string.format(    "%s\n\n%s\n%s\n%s\n%s",
                                                    command,
                                                    stdout,
                                                    stderr,
                                                    exitreason,
                                                    exitcode )              })
                end
            end )
        -- awful.spawn.with_shell(command)
end


run_once("picom") -- example use
#+END_SRC

* Misc
After a lot of experimentation, I've made the following tweaks from my original config
- I do not rely on my `nextkbd` script to change keyboard layouts. Instead, I use awesome's builtin function, add `xcape` as a "run_once" startup app, and configure layouts and options using `localectl`. See the ArchWiki or the `nextkbd` script for more detail.
- I found that using `nitrogen` with a changing multi-monitor setup wasn't working well. I now use awesome's builtin wallpaper management, and I manually copy the wallpaper I want to use to the theme's path. I also commented out nitrogen calls in the `postswitch` scripts of `autorandr`. To revert back to using nitrogen, uncomment `nitrogen` calls in awesome's startup section, and in those `postswitch` scripts.
- I stumbled upon `xwallpaper`, which when used with `sxiv`, is equivalent to a better nitrogen. Currently, wallpapers are handled by awesome by reading `~/.config/wall.jpg`. I use a the script `~/.local/bin/setbg` to change the wallpaper. This script is basically a wrapper around `xwallpaper` that copies the desired wallpaper to `~/.config/wall.jpg` so that awesome can find it on subsequent restarts. This script is also called by `sxiv` when using `Ctrl+x, w`. This way, I can change the wallpaper easily from within `sxiv`, without having to worry about awesome not finding it and starting with a black screen.
